global proc shelf_Shotgun () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Shotgun File Manager" 
        -enableBackground 0
        -align "center" 
        -label "File Manager" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "K:/CodeRepo/Maya/icons/manageworkfiles_1.png" 
        -image1 "K:/CodeRepo/Maya/icons/manageworkfiles_1.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import sgtk\ncommands = sgtk.platform.current_engine().commands\nsync_cmd = commands[\"Shotgun File Manager...\"][\"callback\"]\nsync_cmd()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Shotgun Save As..." 
        -enableBackground 0
        -align "center" 
        -label "Save As" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "K:/CodeRepo/Maya/icons/saveas.png" 
        -image1 "K:/CodeRepo/Maya/icons/saveas.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import sgtk\ncommands = sgtk.platform.current_engine().commands\nsync_cmd = commands[\"Shotgun Save As...\"][\"callback\"]\nsync_cmd()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Publish" 
        -enableBackground 0
        -align "center" 
        -label "Publish" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0 
        -image "K:/CodeRepo/Maya/icons/publish_1.png" 
        -image1 "K:/CodeRepo/Maya/icons/publish_1.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import sgtk\ncommands = sgtk.platform.current_engine().commands\nsync_cmd = commands[\"Publish Shot...\"][\"callback\"]\nsync_cmd()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 37
        -height 37
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Snapshot Scene" 
        -enableBackground 0
        -align "center" 
        -label "Snapshot" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "K:/CodeRepo/Maya/icons/snapshot_34.png" 
        -image1 "K:/CodeRepo/Maya/icons/snapshot_34.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import sgtk\ncommands = sgtk.platform.current_engine().commands\nsync_cmd = commands[\"Snapshot...\"][\"callback\"]\nsync_cmd()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "User Script" 
        -enableBackground 0
        -align "center" 
        -label "User Script" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "K:/CodeRepo/Maya/icons/divider.png" 
        -image1 "K:/CodeRepo/Maya/icons/divider.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "print(\"User defined macro\");" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Scene Breakdown" 
        -enableBackground 0
        -align "center" 
        -label "User Script" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "K:/CodeRepo/Maya/icons/breakdown_1.png" 
        -image1 "K:/CodeRepo/Maya/icons/breakdown_1.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import sgtk\ncommands = sgtk.platform.current_engine().commands\nsync_cmd = commands[\"Scene Breakdown...\"][\"callback\"]\nsync_cmd()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Load Assets" 
        -enableBackground 0
        -align "center" 
        -label "Assets" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "K:/CodeRepo/Maya/icons/load_assets.png" 
        -image1 "K:/CodeRepo/Maya/icons/load_assets.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import sgtk\ncommands = sgtk.platform.current_engine().commands\nsync_cmd = commands[\"Load Asset...\"][\"callback\"]\nsync_cmd()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Framerange" 
        -enableBackground 0
        -align "center" 
        -label "Framerange" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "K:/CodeRepo/Maya/icons/framerange_1.png" 
        -image1 "K:/CodeRepo/Maya/icons/framerange_1.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import sgtk\ncommands = sgtk.platform.current_engine().commands\nsync_cmd = commands[\"Sync Frame Range with Shotgun\"][\"callback\"]\nsync_cmd()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Make Playblast" 
        -enableBackground 0
        -align "center" 
        -label "Make Playblast" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "K:/CodeRepo/Maya/icons/playblast_1.png" 
        -image1 "K:/CodeRepo/Maya/icons/playblast_1.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import sgtk\nimport maya.mel as mel\nimport Maya.utils as mu\nreload(mu)\n\nscene_path = os.path.abspath(cmds.file(query=True, sn=True))\n#projectPath=cmds.workspace(q=True,fullName=True)\ntk = sgtk.sgtk_from_path(scene_path)\n\nwork_template=tk.templates['maya_shot_work']\nfields = work_template.get_fields(scene_path)\n\npanel = cmds.getPanel(wf=1)\ncam=cmds.modelEditor(panel, q=True,camera=True)\n\narea_temp=tk.templates['maya_shot_review']\npath=area_temp.apply_fields(fields)\n\nmu.__exportPlayblast__(path,cam,width=1920,height=1080,exportType='movie')" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

	shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "def init_sgtk(studio_root, default_work_area_path):\n    \"\"\"\n    Minimal setup to ensure the tk-nuke engine is up\n    and running when Nuke is started outside or the\n    Tank command or Shotgun context menus \n    \"\"\"    \n    import sys, os\n\n    # make sure sgtk module can be found in the python path:\n    core_python_path = os.path.abspath(os.path.join(studio_root, \"tank/install/core/python\"))\n    if core_python_path not in sys.path: \n        sys.path.append(core_python_path)\n\n    # Check that we need to start the engine:\n    if \"TANK_ENGINE\" in os.environ:\n        # tk-nuke engine is going to be set up by\n        # tk-multi-launchapp so we don't need to bother\n        return\n\n    # Check that the engine isn't already running\n    if \"TANK_NUKE_ENGINE_MOD_PATH\" in os.environ:\n        # tk-nuke engine is running which will handle all \n        # engine & context management from now on\n        return\n\n    # initialize tk-nuke engine:\n    try:\n        # Determine the work area path that will be used to\n        # create the initial context the engine will be\n        # started with.  If a file path was specified on the\n        # command line then this will be sys.argv[0]\n        work_area_path = default_work_area_path\n        if len(sys.argv) > 0 and sys.argv[0].endswith(\".ma\") and os.path.exists(sys.argv[0]):\n            # file path was passed through the command line\n            work_area_path = sys.argv[0] \n\n        import sgtk\n        tk = sgtk.Sgtk(default_work_area_path)\n\n        # First, create a context from the current file path:\n        ctx = tk.context_from_path(work_area_path)\n        \n        # now, find a template that matches this path.  If \n        # we find one and it contains the \"filetag\" key then we\n        # can use that to try to find a Task and refine \n        # the context:\n        try:\n            template = tk.template_from_path(work_area_path)\n            if template and \"filetag\" in template.keys:\n                fields = template.get_fields(work_area_path)\n                file_tag = fields.get(\"filetag\")\n                if file_tag:\n                    # use the file tag to look up the task from Shotgun\n                    # for this entity:\n                    filters = [[\"sg_filetag\", \"is\", file_tag], [\"entity\", \"is\", ctx.entity]]\n                    sg_results = tk.shotgun.find(\"Task\", filters)\n                    \n                    if sg_results:\n                        # awesome, found a task so lets create a new \n                        # context from it:\n                        sg_result = sg_results[0]\n                        \n                        ctx = tk.context_from_entity(sg_result[\"type\"], sg_result[\"id\"])\n        except:\n            # failed to find a task so lets just go with the non-task context\n            pass\n\n        # and start the engine:\n        sgtk.platform.start_engine(\"tk-maya\", tk, ctx)\n    except Exception, e:\n        print \"Failed to start Toolkit Engine - %s\" % e\n\t\n# pass in sensible values for studio_root & default_work_area_path\nstudio_root = \"K:/Tank\" # The location of the Toolkit code on disk\ndefault_work_area_path = \"M:/00719_grandpa\" # The default work area to be used if no .nk file is specified on the command line\ninit_sgtk(studio_root, default_work_area_path)\n" 
        -enableBackground 0
        -align "center" 
        -label "def init_sgtk(studio_root, default_work_area_path):\n    \"\"\"\n    ..." 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "K:/CodeRepo/Maya/icons/sgtk_init.png" 
        -image1 "K:/CodeRepo/Maya/icons/sgtk_init.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "def init_sgtk(studio_root, default_work_area_path):\n    \"\"\"\n    Minimal setup to ensure the tk-nuke engine is up\n    and running when Nuke is started outside or the\n    Tank command or Shotgun context menus \n    \"\"\"    \n    import sys, os\n\n    # make sure sgtk module can be found in the python path:\n    core_python_path = os.path.abspath(os.path.join(studio_root, \"tank/install/core/python\"))\n    if core_python_path not in sys.path: \n        sys.path.append(core_python_path)\n\n    # Check that we need to start the engine:\n    if \"TANK_ENGINE\" in os.environ:\n        # tk-nuke engine is going to be set up by\n        # tk-multi-launchapp so we don't need to bother\n        return\n\n    # Check that the engine isn't already running\n    if \"TANK_NUKE_ENGINE_MOD_PATH\" in os.environ:\n        # tk-nuke engine is running which will handle all \n        # engine & context management from now on\n        return\n\n    # initialize tk-nuke engine:\n    try:\n        # Determine the work area path that will be used to\n        # create the initial context the engine will be\n        # started with.  If a file path was specified on the\n        # command line then this will be sys.argv[0]\n        work_area_path = default_work_area_path\n        if len(sys.argv) > 0 and sys.argv[0].endswith(\".ma\") and os.path.exists(sys.argv[0]):\n            # file path was passed through the command line\n            work_area_path = sys.argv[0] \n\n        import sgtk\n        tk = sgtk.Sgtk(default_work_area_path)\n\n        # First, create a context from the current file path:\n        ctx = tk.context_from_path(work_area_path)\n        \n        # now, find a template that matches this path.  If \n        # we find one and it contains the \"filetag\" key then we\n        # can use that to try to find a Task and refine \n        # the context:\n        try:\n            template = tk.template_from_path(work_area_path)\n            if template and \"filetag\" in template.keys:\n                fields = template.get_fields(work_area_path)\n                file_tag = fields.get(\"filetag\")\n                if file_tag:\n                    # use the file tag to look up the task from Shotgun\n                    # for this entity:\n                    filters = [[\"sg_filetag\", \"is\", file_tag], [\"entity\", \"is\", ctx.entity]]\n                    sg_results = tk.shotgun.find(\"Task\", filters)\n                    \n                    if sg_results:\n                        # awesome, found a task so lets create a new \n                        # context from it:\n                        sg_result = sg_results[0]\n                        \n                        ctx = tk.context_from_entity(sg_result[\"type\"], sg_result[\"id\"])\n        except:\n            # failed to find a task so lets just go with the non-task context\n            pass\n\n        # and start the engine:\n        sgtk.platform.start_engine(\"tk-maya\", tk, ctx)\n    except Exception, e:\n        print \"Failed to start Toolkit Engine - %s\" % e\n\t\n# pass in sensible values for studio_root & default_work_area_path\nstudio_root = \"K:/Tank\" # The location of the Toolkit code on disk\ndefault_work_area_path = \"M:/00719_grandpa\" # The default work area to be used if no .nk file is specified on the command line\ninit_sgtk(studio_root, default_work_area_path)\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
} 
